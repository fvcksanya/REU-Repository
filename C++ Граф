#include <iostream>
#include <list>
#include <queue>
#include <stack>
#include <vector>

using namespace std;

class Graph {
private:
    int V; // Количество вершин
    list<int>* adj; // Список смежности

public:
    // Конструктор
    Graph(int vertices) {
        V = vertices;
        adj = new list<int>[V];
    }

    // Деструктор
    ~Graph() {
        delete[] adj;
    }

    // Добавление ребра (неориентированный граф)
    void addEdge(int v, int w) {
        adj[v].push_back(w);
        adj[w].push_back(v);
    }

    // Добавление направленного ребра (ориентированный граф)
    void addDirectedEdge(int v, int w) {
        adj[v].push_back(w);
    }

    // Вывод графа
    void printGraph() {
        cout << "Структура графа:" << endl;
        for (int i = 0; i < V; i++) {
            cout << "Вершина " << i << " соединена с: ";
            for (auto neighbor : adj[i]) {
                cout << neighbor << " ";
            }
            cout << endl;
        }
        cout << endl;
    }

    // Обход в глубину (DFS)
    void DFS(int start) {
        vector<bool> visited(V, false);
        cout << "DFS обход (начиная с вершины " << start << "): ";
        DFSUtil(start, visited);
        cout << endl;
    }

    void DFSUtil(int v, vector<bool>& visited) {
        visited[v] = true;
        cout << v << " ";

        for (auto neighbor : adj[v]) {
            if (!visited[neighbor]) {
                DFSUtil(neighbor, visited);
            }
        }
    }

    // Обход в ширину (BFS)
    void BFS(int start) {
        vector<bool> visited(V, false);
        queue<int> q;

        visited[start] = true;
        q.push(start);

        cout << "BFS обход (начиная с вершины " << start << "): ";

        while (!q.empty()) {
            int current = q.front();
            q.pop();
            cout << current << " ";

            for (auto neighbor : adj[current]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    q.push(neighbor);
                }
            }
        }
        cout << endl;
    }

    // DFS с использованием стека (итеративный)
    void DFSIterative(int start) {
        vector<bool> visited(V, false);
        stack<int> s;

        s.push(start);
        cout << "Итеративный DFS (начиная с вершины " << start << "): ";

        while (!s.empty()) {
            int current = s.top();
            s.pop();

            if (!visited[current]) {
                visited[current] = true;
                cout << current << " ";

                // Добавляем соседей в обратном порядке для сохранения порядка обхода
                for (auto it = adj[current].rbegin(); it != adj[current].rend(); ++it) {
                    if (!visited[*it]) {
                        s.push(*it);
                    }
                }
            }
        }
        cout << endl;
    }

    // Проверка на наличие пути между двумя вершинами
    bool hasPath(int start, int end) {
        if (start == end) return true;

        vector<bool> visited(V, false);
        queue<int> q;

        visited[start] = true;
        q.push(start);

        while (!q.empty()) {
            int current = q.front();
            q.pop();

            for (auto neighbor : adj[current]) {
                if (neighbor == end) {
                    return true;
                }
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    q.push(neighbor);
                }
            }
        }
        return false;
    }
};

// Пример использования
int main() {
    // Создаем неориентированный граф с 6 вершинами
    Graph g(6);

    // Добавляем ребра
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 4);
    g.addEdge(3, 5);
    g.addEdge(4, 5);

    // Выводим структуру графа
    g.printGraph();

    // Выполняем обходы
    g.DFS(0);
    g.BFS(0);
    g.DFSIterative(0);

    // Проверяем пути
    cout << "\nПроверка путей:" << endl;
    cout << "Путь из 0 в 5: " << (g.hasPath(0, 5) ? "существует" : "не существует") << endl;
    cout << "Путь из 0 в 6: " << (g.hasPath(0, 6) ? "существует" : "не существует") << endl;

    // Создаем ориентированный граф
    cout << "\n--- ОРИЕНТИРОВАННЫЙ ГРАФ ---" << endl;
    Graph directedGraph(4);
    directedGraph.addDirectedEdge(0, 1);
    directedGraph.addDirectedEdge(0, 2);
    directedGraph.addDirectedEdge(1, 2);
    directedGraph.addDirectedEdge(2, 0);
    directedGraph.addDirectedEdge(2, 3);
    directedGraph.addDirectedEdge(3, 3);

    directedGraph.printGraph();
    directedGraph.DFS(2);

    return 0;
}
